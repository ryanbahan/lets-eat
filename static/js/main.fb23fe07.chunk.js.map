{"version":3,"sources":["utils/index.js","utils/Context.js","utils/miscStyles.js","components/Filter/Filter.js","components/Form/Form.js","components/RestaurantRow/RestaurantRow.js","components/Paginator/Paginator.js","components/RestaurantsContainer/RestaurantsContainer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["getRestaurants","a","fetch","headers","Authorization","res","json","getGenres","data","items","map","restaurant","genre","split","flat","Set","getStates","sortedItems","state","sort","getFilteredRestaurants","restaurants","filters","searchText","filteredByStateAndGenre","filter","filterByState","filterByGenre","allFiltered","filterByQuery","sortAlphabetically","find","item","genres","query","RegExp","name","match","city","b","MyContext","React","createContext","MyProvider","pageIndex","update","setState","then","Provider","value","this","props","children","Component","dropdownStyles","display","gridTemplateColumns","gridTemplateRows","position","backgroundColor","border","borderRadius","padding","paginatorStyles","width","minWidth","maxWidth","buttonStyles","margin","cursor","containerStyles","Filter","toggleDropdown","e","dropdown","closeModal","checkFilteredItems","selection","context","updateForm","updatedItems","concat","getListItems","key","style","alignItems","type","onClick","defaultChecked","id","displayList","listItems","className","flexWrap","fontSize","contextType","Form","clearFilters","target","boxShadow","justifyContent","onChange","placeholder","height","flexGrow","paddingLeft","flexBasis","RestaurantRow","restaurantData","address1","zip","telephone","website","tags","linkStyles","fontWeight","color","href","Paginator","length","Consumer","nums","i","push","num","parseInt","displayNumbers","RestaurantsContainer","getLength","index","slice","getPaginatedSlice","appStyles","flexDirection","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iRAEaA,EAAc,uCAAG,4BAAAC,EAAA,sEACVC,MAAM,6DACtB,CAAEC,QAAS,CACTC,cAAe,0BAHS,cACtBC,EADsB,yBAOrBA,EAAIC,QAPiB,2CAAH,qDAYdC,EAAY,SAACC,GACxB,IAAMC,EAAQD,EAAKE,KAAI,SAAAC,GAAU,OAAIA,EAAWC,MAAMC,MAAM,QAAMC,OAClE,OAAO,YAAI,IAAIC,IAAIN,KAGRO,EAAY,SAACR,GACxB,IACMS,EADQT,EAAKE,KAAI,SAAAC,GAAU,OAAIA,EAAWO,SACtBC,OAC1B,OAAO,YAAI,IAAIJ,IAAIE,KAKRG,EAAyB,SAACC,EAAaC,EAASC,GAC3D,IACMC,EADkBH,EAAYI,QAAO,SAAAd,GAAU,OAAIe,EAAcJ,EAASX,MAChCc,QAAO,SAAAd,GAAU,OAAIgB,EAAcL,EAASX,EAAWC,UACjGgB,EAAcC,EAAcL,EAAyBD,GAC3D,OAAOO,EAAmBF,IAGtBF,EAAgB,SAACJ,EAASX,GAC9B,OAAQW,EAAQS,MAAK,SAAAC,GAAI,OAAIA,IAASrB,EAAWO,UAG7CS,EAAgB,SAACL,EAASV,GAC9B,IAAMqB,EAASrB,EAAMC,MAAM,KAC3B,OAAIS,EAAQS,MAAK,SAAAN,GAAM,OAAIQ,EAAOF,MAAK,SAAAnB,GAAK,OAAIA,IAAUa,SAOtDI,EAAgB,SAACR,EAAaE,GAClC,GAAIA,EAAY,CACd,IAAIW,EAAQ,IAAIC,OAAOZ,EAAY,MACnC,OAAOF,EAAYI,QAAO,SAAAd,GACxB,OACEA,EAAWyB,KAAKC,MAAMH,IACtBvB,EAAW2B,KAAKD,MAAMH,IACtBvB,EAAWC,MAAMyB,MAAMH,MAI3B,OAAOb,GAILS,EAAqB,SAACtB,GAC1B,OAAOA,EAAKW,MAAK,SAAClB,EAAEsC,GAAH,OAAUtC,EAAEmC,KAAOG,EAAEH,KAAQ,GAAK,MC5DxCI,EAAYC,IAAMC,gBAEVC,E,4MACnBzB,MAAQ,CACNG,YAAa,GACbC,QAAS,GACTC,WAAY,GACZqB,UAAW,G,EAQbC,OAAS,SAACb,GACR,EAAKc,SAASd,I,kEANK,IAAD,OAClBhC,IACC+C,MAAK,SAAAvC,GAAI,OAAI,EAAKsC,SAAS,CAAC,YAAetC,S,+BAQ5C,OACE,kBAACgC,EAAUQ,SAAX,CAAoBC,MAAO,CAAC/B,MAAOgC,KAAKhC,MAAO2B,OAAQK,KAAKL,SACzDK,KAAKC,MAAMC,c,GApBoBX,IAAMY,WCSjCC,EAAiB,CAC5BC,QAAS,OACTC,oBAAqB,sBACrBC,iBAAkB,cAClBC,SAAU,WACVC,gBAAiB,OACjBC,OAAQ,+BACRC,aAAc,UACdC,QAAS,UAGEC,EAAkB,CAC7BC,MAAO,OACPC,SAAU,QACVC,SAAU,SAGCC,EAAe,CAC1BC,OAAQ,yBACRC,OAAQ,WAGGC,EAAkB,CAC7BN,MAAO,OACPC,SAAU,QACVC,SAAU,SCnCNK,E,kDAGJ,aAAe,IAAD,8BACZ,gBAMFC,eAAiB,SAACC,GAChB,EAAK3B,SAAS,CAAC4B,UAAW,EAAKxD,MAAMwD,YARzB,EAWdC,WAAa,SAACF,GACZ,EAAK3B,SAAS,CAAC4B,UAAU,KAZb,EAedE,mBAAqB,SAACC,GAGpB,OAFoB,EAAKC,QAAQ5D,MAAzBI,QAEIS,MAAK,SAAAC,GAAI,OAAIA,IAAS6C,MAlBtB,EAyBdE,WAAa,SAACF,GACZ,EAAKC,QAAQjC,OAAO,CAACD,UAAW,IADN,IAItBoC,EADI1D,EAAY,EAAKwD,QAAQ5D,MAAzBI,QAIN0D,EADE1D,EAAQS,MAAK,SAAAC,GAAI,OAAIA,IAAS6C,KACjBvD,EAAQG,QAAO,SAAAO,GAAI,OAAIA,IAAS6C,KAEhCvD,EAAQ2D,OAAO,CAACJ,IAGjC,EAAKC,QAAQjC,OAAO,CAACvB,QAAQ,YAAK0D,MArCtB,EAwCdE,aAAe,SAACzE,GACd,OAAOA,EAAMC,KAAI,SAAAsB,GAAI,OACnB,yBAAKmD,IAAKnD,EAAMoD,MAAO,CAAC7B,QAAS,OAAQ8B,WAAY,WAAYvB,QAAS,WACxE,2BACEwB,KAAK,WACLC,QAAS,kBAAM,EAAKR,WAAW/C,IAC/BwD,eAAgB,EAAKZ,mBAAmB5C,KAE1C,uBAAGyD,GAAIzD,GAAOA,QAhDN,EAqDd0D,YAAc,SAACjF,GACb,IAAMkF,EAAY,EAAKT,aAAazE,GAEpC,OACE,yBAAKmF,UAAU,kBAAkBR,MAAO9B,GACrCqC,IAxDL,EAAKzE,MAAQ,CACXwD,UAAU,GAHA,E,qDA+DJ,IAAD,OAWP,OACE,yBAAKU,MAAO,CAACS,SAAU,SACrB,4BACEP,KAAK,SACLC,QAAS,kBAAM,EAAKf,kBACpBY,MAde,CACnBf,OAAQ,UACRyB,SAAU,SACVlC,OAAQ,+BACRC,aAAc,UACdC,QAAS,UACTM,OAAQ,WAUHlB,KAAKC,MAAMf,KACZ,uBAAGwD,UAAU,uBAEd1C,KAAKhC,MAAMwD,UAAYxB,KAAKwC,YAAYxC,KAAKC,MAAM1C,Y,GAvFvCgC,IAAMY,WAArBkB,EACGwB,YAAcvD,EA4FR+B,QC5FTyB,E,4MAGJC,aAAe,WACb,EAAKnB,QAAQjC,OAAO,CAACvB,QAAS,M,EAGhCuB,OAAS,SAAC4B,GACR,EAAKK,QAAQjC,OAAO,CAACtB,WAAYkD,EAAEyB,OAAOjD,QAC1C,EAAK6B,QAAQjC,OAAO,CAACD,UAAW,K,uDAIhC,IA8BQvB,EAAgB6B,KAAK4B,QAAQ5D,MAA7BG,YAER,OACE,0BAAMuE,UAAU,OAAOR,MAjCN,CACjB7B,QAAS,OACTsC,SAAU,OACVjC,OAAQ,+BACRC,aAAc,UACdsC,UAAW,iCACXnC,MAAO,OACPC,SAAU,QACVC,SAAU,QACVkC,eAAgB,SAChBf,WAAY,WAwBV,2BACEC,KAAK,OACLe,SAAUnD,KAAKL,OACf4C,GAAG,aACHa,YAAY,YACZlB,MA1Bc,CAClBmB,OAAQ,OACRT,SAAU,SACVU,SAAU,IACVC,YAAa,SACbrC,OAAQ,2BAuBN,yBAAKgB,MAAO,CAAC7B,QAAS,OAAQmD,UAAW,SACvC,kBAAC,EAAD,CACEtE,KAAK,QACL3B,MAAOO,EAAUK,KAEnB,kBAAC,EAAD,CACEe,KAAK,UACL3B,MAAOF,EAAUc,KAEnB,4BACEiE,KAAK,SACLF,MA/Ba,CACnBf,OAAQ,UACRyB,SAAU,SACVlC,OAAQ,+BACRC,aAAc,UACdC,QAAS,UACTM,OAAQ,UA0BFmB,QAASrC,KAAK+C,cAHhB,uB,GA/DSxD,IAAMY,WAAnB2C,EACGD,YAAcvD,EA2ERwD,Q,QCiBAW,E,kDA/Fb,aAAe,IAAD,8BACZ,gBAMFnC,eAAiB,SAACC,GAChB,EAAK3B,SAAS,CAAC4B,UAAW,EAAKxD,MAAMwD,YANrC,EAAKxD,MAAQ,CACXwD,UAAU,GAHA,E,qDAWJ,IAAD,SAYHxB,KAAKC,MAAMyD,eATbxE,EAHK,EAGLA,KACAxB,EAJK,EAILA,MACAiG,EALK,EAKLA,SACAvE,EANK,EAMLA,KACApB,EAPK,EAOLA,MACA4F,EARK,EAQLA,IACAC,EATK,EASLA,UACAC,EAVK,EAULA,QACAC,EAXK,EAWLA,KAeI9C,EAAe,CACnB2B,SAAU,SACVzB,OAAQ,UACRD,OAAQ,kBAQJ8C,EAAa,CACjB3D,QAAS,QACTO,QAAS,WACTqD,WAAY,MACZC,MAAO,QAGT,OACE,yBAAKxB,UAAU,gBAAgBR,MA/Bf,CAChBxB,OAAQ,+BACRC,aAAc,UACdsC,UAAW,iCACX5C,QAAS,OACT6C,eAAgB,gBAChBf,WAAY,SACZQ,SAAU,OACVzB,OAAQ,WACRN,QAAS,WAuBP,uBACEyB,QAAS,kBAAM,EAAKf,kBACpBY,MAhBc,CAClBU,SAAU,UACVzB,OAAQ,YAgBHjC,GAEH,yBAAKgD,MAAO,CAAC7B,QAAS,OAAQ8B,WAAY,aACxC,uBACEgC,KAAI,cAASN,GACb3B,MAAO8B,GAEP,uBAAGtB,UAAU,sBACXR,MAAOjB,KAIX,uBACEoB,QAAS,kBAAM,EAAKf,kBACpBoB,UAAU,oBACVR,MAAOjB,KAIVjB,KAAKhC,MAAMwD,UACV,yBAAKkB,UAAU,wBAAwBR,MAAO,CAACsB,UAAW,SACxD,2BAAI9F,GACJ,2BAAIiG,GACJ,2BAAIvE,EAAJ,KAAYpB,EAAZ,KAAqB4F,GACrB,uBAAGO,KAAI,cAASN,GAAa3B,MAAO8B,GAAaH,GACjD,uBAAGM,KAAML,EAAS5B,MAAO8B,GAAaF,GACtC,oCAAUC,S,GAxFMxE,IAAMY,WCkCnBiE,EAhCG,SAAC,GAAkB,IAAD,IAAhBC,cAAgB,MAAP,EAAO,EAqBlC,OACE,kBAAC/E,EAAUgF,SAAX,MACC,SAAA1C,GAAO,OACN,yBAAKc,UAAU,YAAYR,MAAOrB,GAtBf,SAACwD,EAAQ1E,GAE9B,IADA,IAAI4E,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAAS,GAAIG,IAC/BD,EAAKE,KAAKD,EAAI,GAGhB,OAAOD,EAAK/G,KAAI,SAAAkH,GAAG,OACjB,4BACEtC,KAAK,SACLH,IAAKyC,EACLxC,MAAOjB,EACPoB,QAAS,kBAAM1C,EAAO,CAACD,UAAWiF,SAASD,OAE1CA,MAUAE,CAAeP,EAAQzC,EAAQjC,aCiCzBkF,EAvDc,WAE3B,IAaMC,EAAY,SAAC3G,EAAaC,EAASC,GACvC,OAAOH,EAAuBC,EAAaC,EAASC,GAAYgG,QAGlE,OAEE,kBAAC/E,EAAUgF,SAAX,MACG,SAAA1C,GAAO,OACN,yBAAKc,UAAU,uBAAuBR,MAAOd,GAC7C,kBAAC,EAAD,CACEiD,OACES,EACAlD,EAAQ5D,MAAMG,YACdyD,EAAQ5D,MAAMI,QACdwD,EAAQ5D,MAAMK,eA3BIF,EAgCpByD,EAAQ5D,MAAMG,YAhCmBC,EAiCjCwD,EAAQ5D,MAAMI,QAjC4BC,EAkC1CuD,EAAQ5D,MAAMK,WAlCwCqB,EAmCtDkC,EAAQ5D,MAAM0B,UPsBS,SAACvB,EAAa4G,GAC7C,OAAO5G,EAAY6G,MAAe,GAARD,EAAc,GAAY,GAARA,GOxDbE,CADD/G,EAAuBC,EAAaC,EAASC,GACLqB,GACxClC,KAAI,SAAAC,GAAU,OAEtC,kBAAC,EAAD,CACEwE,IAAKxE,EAAW8E,GAChBmB,eAAc,eAAMjG,UA+BnBqH,EACDlD,EAAQ5D,MAAMG,YACdyD,EAAQ5D,MAAMI,QACdwD,EAAQ5D,MAAMK,aAEd,yBAAK6D,MAAO,CAAChB,OAAQ,aACnB,gFA5CiB,IAAC/C,EAAaC,EAASC,EAAYqB,MCJ1DwF,EAAY,CAChB1E,SAAU,WACVH,QAAS,OACT8E,cAAe,SACfhD,WAAW,UACXe,eAAgB,SAChBtC,QAAS,oBAaIwE,EAVH,kBACN,kBAAC,EAAD,KACE,yBAAK1C,UAAU,MAAMR,MAAOgD,GAC1B,0CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrG,MACvB,2DCZNsG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnG,MAAK,SAAAoG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb23fe07.chunk.js","sourcesContent":["// api calls\n\nexport const getRestaurants = async () => {\n  const res = await fetch('https://code-challenge.spectrumtoolbox.com/api/restaurants',\n    { headers: {\n      Authorization: 'Api-Key q3MNxtfep8Gt', },\n    }\n  )\n\n  return res.json();\n};\n\n// helpers for mapping all available states/genres to filters\n\nexport const getGenres = (data) => {\n  const items = data.map(restaurant => restaurant.genre.split(',')).flat();\n  return [...new Set(items)];\n}\n\nexport const getStates = (data) => {\n  const items = data.map(restaurant => restaurant.state);\n  const sortedItems = items.sort();\n  return [...new Set(sortedItems)];\n}\n\n// selectors for presenting specific restaurants without using derived state\n\nexport const getFilteredRestaurants = (restaurants, filters, searchText) => {\n  const filteredByState = restaurants.filter(restaurant => filterByState(filters, restaurant));\n  const filteredByStateAndGenre = filteredByState.filter(restaurant => filterByGenre(filters, restaurant.genre));\n  const allFiltered = filterByQuery(filteredByStateAndGenre, searchText);\n  return sortAlphabetically(allFiltered);\n}\n\nconst filterByState = (filters, restaurant) => {\n  return !filters.find(item => item === restaurant.state);\n}\n\nconst filterByGenre = (filters, genre) => {\n  const genres = genre.split(',');\n  if (filters.find(filter => genres.find(genre => genre === filter)))  {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nconst filterByQuery = (restaurants, searchText) => {\n  if (searchText) {\n    let query = new RegExp(searchText, \"gi\");\n    return restaurants.filter(restaurant => {\n      return (\n        restaurant.name.match(query) ||\n        restaurant.city.match(query) ||\n        restaurant.genre.match(query)\n      );\n    });\n  } else {\n    return restaurants;\n  }\n}\n\nconst sortAlphabetically = (data) => {\n  return data.sort((a,b) => (a.name > b.name) ? 1 : -1);\n}\n\nexport const getPaginatedSlice = (restaurants, index) => {\n  return restaurants.slice((index * 10) - 10, index * 10);\n}\n","import React from 'react';\nimport { getRestaurants } from '.';\n\nexport const MyContext = React.createContext();\n\nexport default class MyProvider extends React.Component {\n  state = {\n    restaurants: [],\n    filters: [],\n    searchText: \"\",\n    pageIndex: 1,\n  }\n\n  componentDidMount() {\n    getRestaurants()\n    .then(data => this.setState({'restaurants': data}));\n  }\n\n  update = (item) => {\n    this.setState(item);\n  }\n\n  render() {\n    return (\n      <MyContext.Provider value={{state: this.state, update: this.update}}>\n        {this.props.children}\n      </MyContext.Provider>\n    )\n  }\n}\n","// css-in-js styles that need to be accessed outside of the render method or return are stored here\n\nexport const modalStyles = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  position: \"fixed\",\n  top: \"0\",\n  left: \"0\",\n  width: \"100vw\",\n  height: \"100vh\",\n  backgroundColor: \"rgba(0,0,0,0.25)\"\n};\n\nexport const dropdownStyles = {\n  display: \"grid\",\n  gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n  gridTemplateRows: \"1fr 1fr 1fr\",\n  position: \"absolute\",\n  backgroundColor: \"#fff\",\n  border: \"solid 0.5px rgba(0,0,0,0.25)\",\n  borderRadius: \"0.25rem\",\n  padding: \"0.5rem\",\n};\n\nexport const paginatorStyles = {\n  width: \"55vw\",\n  minWidth: \"25rem\",\n  maxWidth: \"50rem\",\n};\n\nexport const buttonStyles = {\n  margin: \"1rem 0.25rem 0 0.25rem\",\n  cursor: \"pointer\",\n}\n\nexport const containerStyles = {\n  width: \"55vw\",\n  minWidth: \"25rem\",\n  maxWidth: \"50rem\",\n};\n","import React from 'react';\nimport { MyContext } from '../../utils/Context';\nimport { dropdownStyles } from '../../utils/miscStyles';\n\nclass Filter extends React.Component {\n  static contextType = MyContext;\n\n  constructor() {\n    super();\n    this.state = {\n      dropdown: false,\n    }\n  }\n\n  toggleDropdown = (e) => {\n    this.setState({dropdown: !this.state.dropdown});\n  }\n\n  closeModal = (e) => {\n    this.setState({dropdown: false});\n  }\n\n  checkFilteredItems = (selection) => {\n    const { filters } = this.context.state;\n\n    if (filters.find(item => item === selection)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  updateForm = (selection) => {\n    this.context.update({pageIndex: 1});\n\n    const { filters } = this.context.state;\n    let updatedItems;\n\n    if (filters.find(item => item === selection)) {\n      updatedItems = filters.filter(item => item !== selection);\n    } else {\n      updatedItems = filters.concat([selection]);\n    }\n\n    this.context.update({filters: [...updatedItems]})\n  }\n\n  getListItems = (items) => {\n    return items.map(item => (\n      <div key={item} style={{display: \"flex\", alignItems: \"baseline\", padding: \"0.5rem\"}}>\n        <input\n          type=\"checkbox\"\n          onClick={() => this.updateForm(item)}\n          defaultChecked={this.checkFilteredItems(item)}\n        />\n        <p id={item}>{item}</p>\n      </div>\n    ));\n  }\n\n  displayList = (items) => {\n    const listItems = this.getListItems(items);\n\n    return (\n      <div className=\"filter-dropdown\" style={dropdownStyles}>\n        {listItems}\n      </div>\n    );\n  }\n\n  render() {\n\n    const buttonStyles = {\n      cursor: \"pointer\",\n      fontSize: \"1.5rem\",\n      border: \"solid 0.5px rgba(0,0,0,0.25)\",\n      borderRadius: \"0.25rem\",\n      padding: \"0.75rem\",\n      margin: \"0.5rem\",\n    };\n\n    return (\n      <div style={{flexWrap: \"wrap\"}}>\n        <button\n          type=\"button\"\n          onClick={() => this.toggleDropdown()}\n          style={buttonStyles}\n        >\n          {this.props.name}\n          <i className=\"fas fa-caret-down\"></i>\n        </button>\n        {this.state.dropdown && this.displayList(this.props.items)}\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\nimport { MyContext } from '../../utils/Context';\nimport { getStates, getGenres } from '../../utils';\n\nclass Form extends React.Component {\n  static contextType = MyContext;\n\n  clearFilters = () => {\n    this.context.update({filters: []});\n  }\n\n  update = (e) => {\n    this.context.update({searchText: e.target.value});\n    this.context.update({pageIndex: 1});\n  }\n\n  render() {\n    const formStyles = {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      border: \"solid 0.5px rgba(0,0,0,0.15)\",\n      borderRadius: \"0.25rem\",\n      boxShadow: \"0.5px 1px 5px rgba(0,0,0,0.05)\",\n      width: \"55vw\",\n      minWidth: \"25rem\",\n      maxWidth: \"50rem\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    };\n\n    const inputStyles = {\n      height: \"3rem\",\n      fontSize: \"1.5rem\",\n      flexGrow: \"1\",\n      paddingLeft: \"0.5rem\",\n      margin: \"1rem 1rem 1rem 0.5rem\",\n    }\n\n    const buttonStyles = {\n      cursor: \"pointer\",\n      fontSize: \"1.5rem\",\n      border: \"solid 0.5px rgba(0,0,0,0.25)\",\n      borderRadius: \"0.25rem\",\n      padding: \"0.75rem\",\n      margin: \"0.5rem\",\n    };\n\n    const { restaurants } = this.context.state;\n\n    return (\n      <form className=\"Form\" style={formStyles}>\n        <input\n          type=\"text\"\n          onChange={this.update}\n          id=\"searchText\"\n          placeholder=\"Search...\"\n          style={inputStyles}\n        />\n        <div style={{display: \"flex\", flexBasis: \"100%\"}}>\n          <Filter\n            name=\"State\"\n            items={getStates(restaurants)}\n          />\n          <Filter\n            name=\"Cuisine\"\n            items={getGenres(restaurants)}\n          />\n          <button\n            type=\"button\"\n            style={buttonStyles}\n            onClick={this.clearFilters}\n          >\n            Clear filters\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nclass RestaurantRow extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      dropdown: false,\n    }\n  }\n\n  toggleDropdown = (e) => {\n    this.setState({dropdown: !this.state.dropdown});\n  }\n\n  render() {\n\n    const {\n      name,\n      genre,\n      address1,\n      city,\n      state,\n      zip,\n      telephone,\n      website,\n      tags\n    } = this.props.restaurantData;\n\n    const rowStyles = {\n      border: \"solid 0.5px rgba(0,0,0,0.25)\",\n      borderRadius: \"0.25rem\",\n      boxShadow: \"0.5px 1px 5px rgba(0,0,0,0.05)\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      margin: \"0.5rem 0\",\n      padding: \"0 1rem\",\n    };\n\n    const buttonStyles = {\n      fontSize: \"1.5rem\",\n      cursor: \"pointer\",\n      margin: \"0.25rem 0.5rem\",\n    };\n\n    const titleStyles = {\n      fontSize: \"1.25rem\",\n      cursor: \"pointer\",\n    }\n\n    const linkStyles = {\n      display: \"block\",\n      padding: \"0.5rem 0\",\n      fontWeight: \"600\",\n      color: \"#000\",\n    }\n\n    return (\n      <div className=\"RestaurantRow\" style={rowStyles}>\n        <p\n          onClick={() => this.toggleDropdown()}\n          style={titleStyles}\n        >\n          {name}\n        </p>\n        <div style={{display: \"flex\", alignItems: \"baseline\"}}>\n          <a\n            href={`tel:${telephone}`}\n            style={linkStyles}\n          >\n            <i className=\"fas fa-phone-volume\"\n              style={buttonStyles}\n            >\n            </i>\n          </a>\n          <i\n            onClick={() => this.toggleDropdown()}\n            className=\"fas fa-caret-down\"\n            style={buttonStyles}\n          >\n          </i>\n        </div>\n        {this.state.dropdown &&\n          <div className=\"RestaurantRowDropdown\" style={{flexBasis: \"100%\"}}>\n            <p>{genre}</p>\n            <p>{address1}</p>\n            <p>{city}, {state}, {zip}</p>\n            <a href={`tel:${telephone}`} style={linkStyles}>{telephone}</a>\n            <a href={website} style={linkStyles}>{website}</a>\n            <p>tags: {tags}</p>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default RestaurantRow;\n","import React from 'react';\nimport { MyContext } from '../../utils/Context';\nimport { buttonStyles, paginatorStyles } from '../../utils/miscStyles';\n\nconst Paginator = ({length = 0}) => {\n\n  const displayNumbers = (length, update) => {\n    let nums = [];\n    for (let i = 0; i < length / 10; i++) {\n      nums.push(i + 1);\n    }\n\n    return nums.map(num => (\n      <button\n        type=\"button\"\n        key={num}\n        style={buttonStyles}\n        onClick={() => update({pageIndex: parseInt(num)})}\n      >\n        {num}\n      </button>\n    ))\n  }\n\n\n  return (\n    <MyContext.Consumer>\n    {context => (\n      <div className=\"Paginator\" style={paginatorStyles}>\n        {displayNumbers(length, context.update)}\n      </div>\n    )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default Paginator;\n","import React from 'react';\nimport RestaurantRow from '../RestaurantRow/RestaurantRow';\nimport { MyContext } from '../../utils/Context';\nimport { getFilteredRestaurants, getPaginatedSlice } from '../../utils';\nimport Paginator from '../Paginator/Paginator';\nimport { containerStyles } from '../../utils/miscStyles';\n\nconst RestaurantsContainer = () => {\n\n  const displayRestaurants = (restaurants, filters, searchText, pageIndex) => {\n    const filteredRestaurants = getFilteredRestaurants(restaurants, filters, searchText);\n    const paginatedRestaurants = getPaginatedSlice(filteredRestaurants, pageIndex);\n    return paginatedRestaurants.map(restaurant =>\n      (\n        <RestaurantRow\n          key={restaurant.id}\n          restaurantData={{...restaurant}}\n        />\n      )\n    )\n  };\n\n  const getLength = (restaurants, filters, searchText) => {\n    return getFilteredRestaurants(restaurants, filters, searchText).length;\n  }\n\n  return (\n\n    <MyContext.Consumer>\n      {context => (\n        <div className=\"RestaurantsContainer\" style={containerStyles}>\n        <Paginator\n          length={\n            getLength(\n            context.state.restaurants,\n            context.state.filters,\n            context.state.searchText)\n          }\n        />\n        {\n          displayRestaurants(\n          context.state.restaurants,\n          context.state.filters,\n          context.state.searchText,\n          context.state.pageIndex)\n        }\n        {\n          !getLength(\n          context.state.restaurants,\n          context.state.filters,\n          context.state.searchText)\n          &&\n          <div style={{margin: \"2.5rem 0\"}}>\n            <p>Sorry, nothing matches your search - try again!</p>\n          </div>\n        }\n        </div>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nexport default RestaurantsContainer;\n","import React from 'react';\nimport Form from '../Form/Form';\nimport RestaurantsContainer from '../RestaurantsContainer/RestaurantsContainer';\nimport MyProvider from '../../utils/Context';\n\nconst appStyles = {\n  position: \"relative\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems:\" center\",\n  justifyContent: \"center\",\n  padding: \"2.5rem 0 10rem 0\",\n}\n\nconst App = () => (\n      <MyProvider>\n        <div className=\"App\" style={appStyles}>\n          <h1>Let's Eat!</h1>\n          <Form />\n          <RestaurantsContainer />\n        </div>\n      </MyProvider>\n    )\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}